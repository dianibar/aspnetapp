name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: aspnetapp
  ECS_SERVICE: fargate-windows-2022-iis
  ECS_CLUSTER: ECS-Windows
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: iis_fargate    

jobs:
  deploy:
    name: Deploy
    runs-on: windows-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and test
          # push it to ECR so that it can
          # be deployed to ECS.
          cd aspnetapp
          echo $Env:ECR_REGISTRY/
          echo $Env:ECR_REPOSITORY
          echo $Env:IMAGE_TAG
          echo "$($Env:ECR_REGISTRY)/$($Env:ECR_REPOSITORY):$($Env:IMAGE_TAG)"
          echo docker build -t "$($Env:ECR_REGISTRY)/$($Env:ECR_REPOSITORY):$($Env:IMAGE_TAG)" .
          docker build -t "$($Env:ECR_REGISTRY)/$($Env:ECR_REPOSITORY):$($Env:IMAGE_TAG)" .
          docker push "$($Env:ECR_REGISTRY)/$($Env:ECR_REPOSITORY):$($Env:IMAGE_TAG)"
          echo "image=$($Env:ECR_REGISTRY)/$($Env:ECR_REPOSITORY):$($Env:IMAGE_TAG)" >> $env:GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true          
